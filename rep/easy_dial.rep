
struct node_tst
{
    char m_c;
    phone m_valor;
    node_tst *m_fesq;
    node_tst *m_fdret;
    node_tst *m_fcen;
};

node_tst *m_arrel;


struct node
{
    node_tst *m_val;
    phone m_p;
    node *m_ant;
    node *m_seg;
};

node *m_primer;
node *m_pi; // Punt d'inter√®s.

string m_pref;

bool m_indef;

double m_freq;

void consulta(const string &k, bool &hi_es, phone &v) const throw();
void insereix(const string &k, const phone &v) throw(error);

node_tst *rconsulta(node_tst *n, nat i, const string &k) const throw();
node_tst *rinsereix(node_tst *n, nat i, const string &k, const phone &v) throw(error);

void borra_arbre(node_tst *n);
node_tst *crea_arbre (node_tst *n);

node_tst *trobar_pref(node_tst *n, nat i, const string &k) const throw();

void comencen_aux(vector<string> &result, string str, node_tst *nt) const throw(error);

void merge(std::vector<phone> &arr, nat start, nat middle, nat end);

void mergeSort(std::vector<phone> &arr, nat start, nat end);

void test(const vector<phone> &v);

node_tst *buscar_pref(node_tst *n, const char &c);

void crea_node(node_tst *a);

void comencen_aux(vector<phone> &result, string str, node_tst *nt) const throw(error);

void comencen(vector<phone> &result, const string &pref) const throw(error);