// HASH TABLE amb tècnica open hashing.

template <typename Clau>
class diccionari
{
public:
    /* Construeix un diccionari buit. */
    diccionari() throw(error);

    /* Constructor per còpia, operador d'assignació i destructor. */
    diccionari(const diccionari &d) throw(error);
    diccionari &operator=(const diccionari &d) throw(error);
    ~diccionari() throw();

    void insereix(const Clau &c, phone *&p);
    bool cerca(const Clau &c, phone *&p) const;
    bool elimina(const Clau &c);
    void modifica(const Clau &c, phone *&p);
    bool guarda(vector<phone> &v) const;
    bool save(vector<phone> &v) const;

    /* Quantitat d'elements que conté el diccionari */
    nat elements() const;

    /* Mostra pel canal de sortida informació sobre la hash table */
    void estadistiques();

private:
    static long const MULT = 31415926;
    struct node_hash
    {
        Clau m_clau;
        phone *m_valor;
        node_hash *m_seg;

    };

    node_hash **m_taula;

    nat m_mida;
    nat m_quants;

    // Calcula la posició en la taula per al número donat.
    nat hash(Clau c) const;

    /* 
    Busca en l'estructura l'element amb clau num i assigna els paràmetres hi_es si l'ha trobat
    i un punter al primer node trobat en la llista de nodes i un altre al predecessor (si n'hi ha).
    */
    bool obtenir_phone(const Clau &c, node_hash *&n, node_hash *&nr);

    // Duplica l'espai de la taula quan s'arriba al llindar de factor de carrega.
    void redispersio();

    // Estadístiques
    nat colisions;
    nat redispersions;
    nat total;

    // Constants
    static float const factor_carrega = 0.75;
};

diccionari<nat> d_nums;
diccionari<string> d_noms;

// AVL

/*
    A priori hem analitzat que el diccionari amb les propietats de BST i AVL són les més idonies 
    a les necessitats requerides en els diversos punts que es mencionarán:

    1. No requereix coneixer previament la quantitat d'elements.
    2. Els costos són logaritmics en el cas mitjà.
    3. Ens permet el parell clau-valor on clau és el num de telèfon i clau un punter al objecte phone.
    4. Els costos del constructor per còpia i operador d'assignación són lineals.

    Altres estructures:

    +-----------------------------------------------------------------------+
    | Estructura   |  Cost constructor  |  Cost consultar  |  Cost eliminar |
    +-----------------------------------------------------------------------+
    |  HASH        |       O(n)         |       O(1)        |     O(1)      |
    |  AVL         |       O(1)         |       O(log n)    |     O(log n)  |
    |  Linked list |
    +-----------------------------------------------------------------------+
*/